{Application 'SUPERVISOR' logic file generated by CSPro}
PROC GLOBAL

string		p_version="27AUG2019";
numeric 	i, j, k, l, m, lrc1, src;						{ internal auxiliar calcularion variables }
string		c_i,c_j,c_k;				{ internal auxiliar alpha variables for keys, ... }
alpha(3)	cod_oper, x;					{ Operator code }
numeric		lrc,file_status;			{ loadcase/selcase return code }
numeric		always,always2,always3,always4,aux_cluster,cluster_ok;			{ internal variables }
string		a_aux1,a_aux2,a_aux3;		{ internal variables }
alpha(1)	scode;						{ serial code to retrieve the operator id }
numeric		choice, choice2, choice3, choice4;
										{ selected option from menu }
alpha(3)	cluster_c;					{ cluster key - alpha }
numeric		max_array_elements = 35;	{ Maximum number of HH to visit by cluster }
array alpha(60) hh_assign(60); 
array alpha(60) hh_list(60);
array		hh_hh(35);					{ HH number }
array		hh_enum(35);				{ enumerator's code for each HH }
array alpha(60) hh_head(60);			{ head of the hh for each HH }
array alpha(35) hh_addr(35);			{ HH address for the selected HH }
array alpha(3)	hidden_list(5);			{ Hidden HH selection }

alpha(50) superv, temp, chkfile;
numeric		hh_count;					{ total HH in the cluster }
//array alpha(45) hh_repl_list(7);		{ list of possible replacement hh } 
alpha(50)		f_received, f_concat,f_transmission;
										{ folder location }
string		eq_id_c,prefix,app,app_folder,hh_c,pid_c,hh_orig_c, text1;		{ eq id in char }

// Syncronization variables 
string 		SyncFilename = "BluetoothSync.pnc";
string 		SyncDeviceName = "CSEntryBluetoothSync";
string 		SyncDeviceTeam;
// ----- FTP server credentials
string		ftp_server = "xxx.xxx.xxx.xxx";
string		ftp_user = "User";
string		ftp_password = "Password";
string		ftp_root = "/CountryFTF/";			
// CSweb
string      csw_server = "xxx.xxx.xxx.xxx";
string		csw_user = "User";
string		csw_password = "Password"; 



// for pff generation
string		f_name;						{ file name, used for file selection to be transmitted }
numeric		addmode;					{ defines if the application starts in addmode(new data file) or modify mode(data file exist) }
file		working_file;
file      fromckid;                      { to read file generated by PECkid        }
string reportfilename;

{ ------------------------------------------------------------------ }

// First transmission with Central office, or first transmission for new cycle.
// Receives tables:  Interv : Personnel list, CLUSTERS : Sample with all clusters
function op_first_transmission()
	close(clusters);
	close(interv);
	filedelete("/Lookup/interv.dat.idx");
	filedelete("/Lookup/clusters.dat.idx");

  if !syncconnect( FTP,ftp_server,ftp_user,ftp_password ) then 
//  if !syncconnect( CSWeb,csw_server,csw_user,csw_password ) then 

    errmsg( 10053 )
  else
   { syncfile( GET, concat(ftp_root,"TESTINGMALI.txt"),"../");}
    syncfile( GET, concat(ftp_root,"LOOKUP/*.dat"),"../LOOKUP/");
    syncfile( GET, concat(ftp_root,"LOOKUP/rep_header.txt"),"../LOOKUP/");
    syncfile( GET, concat(ftp_root,"ENTRY/*.pen"),"../Entry/"); 
    syncfile( GET, concat(ftp_root,"SUPERVISOR/*.pen"),"../Supervisor/"); 
   
	syncdisconnect();
	errmsg(10052);
	errmsg(10017);
        execPFF("supervisor.pff",stop);
	stop(-1);
  endif;

end;

{ ------------------------------------------------------------------ }
// First transmission with enumerators
// Send tables: Interv : Personnel list, Clusters : Sample with all clusters
// Send program updates
  function op_transmission_BT()

	errmsg(10050);	
	src = syncserver(Bluetooth,".\");
	if src = 1 then
		errmsg(10052);
	else
		errmsg(10053);
	endif;

  end;


  { construct the PFF file for check-id }
  function makeckid( xdata )
    { whatdata 1-file received from interviewers - receive    }
    {          2-temporary collapsed files for cluster - temp }
    {          3-final cluster file - final                   }
	if fileexist(concat(".\",strip(f_name))) = 1 then
		filedelete(concat(".\",strip(f_name)));
	endif;
	file_status = setfile(working_file,concat(".\",strip(f_name)));
    
    FileWrite( working_file, "[Run Information]" );
    FileWrite( working_file, "Version=CSPro 7.1" );
    FileWrite( working_file, "AppType=Entry" );
    FileWrite( working_file, "[DataEntryInit]" );
    	
    numeric chktotals = ( xdata <> 1 );
    FileWrite( working_file, "StartMode=ADD" );
    filewrite(working_file, "Lock=Verify");
    FileWrite( working_file, "NoFileOpen=Yes" );

    FileWrite( working_file, "[Files]" );
    FileWrite( working_file, concat( "Application=", strip(superv), "\",  strip(app), ".ent" ) );
	filewrite(working_file, concat("InputData=", ".\ENTRY\NULL.dat"));
    
    FileWrite( working_file, "[ExternalFiles]" );
    FileWrite( working_file, concat( "CLUSTERS=", ".\LOOKUP\Clusters.DAT" ) );
    FileWrite( working_file, concat( "SAMPSEL=",  ".\LOOKUP\SampSel.dat" ) );
    FileWrite( working_file, concat( "CTRL_CLUSTER=", ".\LOOKUP\ctrl_cluster.DAT" ) );
    FileWrite( working_file, concat( "HH_GPS=", strip(temp), "\G", strip(cluster_c), ".DAT" ) );

    if xdata = 1 then       { data by interviewers }
      FileWrite( working_file, concat( "CFTF=", strip(temp),   "\A", strip(cluster_c), ".DAT" ) );
    elseif xdata = 2 then   { data in working directory }
      FileWrite( working_file, concat( "CFTF=", strip(temp),   "\A", strip(cluster_c), ".DAT" ) );
    elseif xdata = 3 then   { data before sending cluster to central office }
      FileWrite( working_file, concat( "CFTF=", strip(temp),   "\A", strip(cluster_c), ".DAT" ) );
    endif;
    FileWrite( working_file, "[Parameters]" );
    FileWrite( working_file, concat("Parameter=", edit("9",chktotals) ));

    close( working_file ); 
  end;


{ ------------------------------------------------------------------ }
// Normal Transmission with CENTRAL OFFICE. Main data transmission
// Send enumerator data
function op_transmission_CO()
// Close file that will be received
	close(INTERV);
	close(CLUSTERS);

	errmsg(10055);

  if !syncconnect( FTP,ftp_server,ftp_user,ftp_password ) then 
//  if !syncconnect( CSWeb,csw_server,csw_user,csw_password ) then 
    errmsg( 10053 );
	op_transmission_CO = 0;
  else
//    syncfile( GET, concat(ftp_root,"TESTINGMALI.txt"),"../");
    syncfile( PUT, "../DATA/TRANSMISSION/A*.dat", concat(ftp_root,"CODATA/RECEIVED/"));
    syncfile( PUT, "../DATA/TRANSMISSION/O*.dat", concat(ftp_root,"CODATA/RECEIVED/"));
    syncfile( PUT, "../DATA/TRANSMISSION/G*.dat", concat(ftp_root,"CODATA/RECEIVED/"));
    syncfile( PUT, "../DATA/TRANSMISSION/A*.not", concat(ftp_root,"CODATA/RECEIVED/"));
    syncfile( PUT, "../DATA/TRANSMISSION/*.kml", concat(ftp_root,"CODATA/AREA/"));
    syncfile( PUT, "../DATA/RECEIVED/A*.dat", concat(ftp_root,"CODATA/BACKUP/"));
    syncfile( PUT, "../DATA/RECEIVED/O*.dat", concat(ftp_root,"CODATA/BACKUP/"));
    syncfile( PUT, "../DATA/RECEIVED/G*.dat", concat(ftp_root,"CODATA/BACKUP/"));
    syncfile( PUT, "../DATA/CONTROL/CT*.dat", concat(ftp_root,"CODATA/CONTROL/"));
    syncfile( GET, concat(ftp_root,"LOOKUP/*.dat"),"../LOOKUP/");
    syncfile( GET, concat(ftp_root,"LOOKUP/rep_header.txt"),"../LOOKUP/");
    syncfile( GET, concat(ftp_root,"ENTRY/*.pen"),"../Entry/"); 
    syncfile( GET, concat(ftp_root,"SUPERVISOR/*.pen"),"../Supervisor/"); 
   
	syncdisconnect();
	errmsg(10052);
	op_transmission_CO = 1;	
	errmsg(10017);
        execPFF("supervisor.pff",stop);
	stop(-1);
  endif;

// Delete idx for the files to be received
	filedelete("/Lookup/interv.dat.idx");
	filedelete("/Lookup/clusters.dat.idx");
	filedelete("/Lookup/ctrl_general.dat.idx");

end;


{ ------------------------------------------------------------------ }
// Receive program updates from CENTRAL OFFICE, all the programs . 
function op_transmission_programs()

  if !syncconnect( FTP,ftp_server,ftp_user,ftp_password ) then 
//  if !syncconnect( CSWeb,csw_server,csw_user,csw_password ) then 
    errmsg( 10053 );
	op_transmission_programs = 0;
  else
//    syncfile( GET, concat(ftp_root,"TESTINGMALI.txt"),"../");

    syncfile( GET, concat(ftp_root,"SUPERVISOR/*.pen"),"../SUPERVISOR/"); 
    syncfile( GET, concat(ftp_root,"ENTRY/*.pen"),"../ENTRY/"); 
    syncfile( GET, concat(ftp_root,"LOOKUP/Clusters.dat"),"../LOOKUP/");
    syncfile( GET, concat(ftp_root,"LOOKUP/Interv.dat"),"../LOOKUP/");
    syncfile( GET, concat(ftp_root,"LOOKUP/SampSel.dat"),"../LOOKUP/");
    syncfile( GET, concat(ftp_root,"LOOKUP/rep_header.txt"),"../LOOKUP/");
    
    
	syncdisconnect();
	errmsg(10052);
	op_transmission_programs = 1;	
	errmsg(10017);
        execPFF("supervisor.pff",stop);
	stop(-1);
  endif;
	
end;	

{ ------------------------------------------------------------------ }
// Delete transmission files after successful transmission
function op_delete_transmission()
	filedelete("./Data/TRANSMISSION/*.dat");
	filedelete("./Data/TRANSMISSION/NOTES/*.not");
end;


{ ------------------------------------------------------------------ }
// Serialization 
function op_serial()
  {ENG+} errmsg("Select supervisor assigned to this tablet"); {+ENG}
  lrc = selcase(INTERV,"") include (interv.iname) where IROLE = 0;
  if lrc then
	serial_id = 1;
	eq_id = interv.icode;
	ser.team_id = icode / 10;
	lrc = writecase(ser);
	if lrc = 0 then;
      errmsg(10001);
	  stop(1);
	endif;
  endif;
  errmsg(10002);
  op_serial = 1;
end;

{ ------------------------------------------------------------------ }
// Cluster selection 
function op_cluster_selection()
	cluster_ok = 1;
	op_cluster_selection = 0;
	if ser.c_cluster <> notappl then
		aux_cluster = ser.c_cluster;
	endif;
end;

{ ------------------------------------------------------------------ }
// HH array initialization
function op_init_array()
	c_i = edit("999",ser.c_cluster);
	lrc = loadcase(sampsel,c_i);		
    max_array_elements = XTOTAL;
	do varying i=1 until i > max_array_elements;
		hh_assign(i) 	= "";
		hh_enum(i)		= 0;
	enddo;
end;

{ ------------------------------------------------------------------ }
// HH Enumerator list
function op_enumlist() 
  j = 0;
  if hh_enum(choice2-2) = 0 then
    j = 1; 
  elseif ctrl_cluster.hh_status(choice2-2) <> notappl then
	errmsg(10011);				{hh with data collected }
  else
	j = 1;
  endif;	
  if j = 1 then
	lrc = selcase(interv,"") include (iname) where iteam = int(eq_id/10) & irole in 0,1; 
	if lrc = 1 then
	  hh_enum(choice2-2) = interv.icode;
	  hh_assign(choice2-2) = interv.iname;
	endif;
  endif;
end; 

function Checkserial()
	{checking for Serialization}
	close(SER);
	if fileexist("../LOOKUP/serial.dat") then
		filedelete("../LOOKUP/serial.dat.csidx"); 
		setfile(SER,"../LOOKUP/serial.dat"); 
	else
		setfile(SER,"../LOOKUP/serial.dat",create); 
	endif;
	scode="1";  
	if !loadcase(SER,scode) then
		op_serial();
	endif;
end;



{ ------------------------------------------------------------------ }
// HH Enumerator assignment 
function op_assign_3();		{ assignment itself }
	always3 = 1;
	while always3 = 1 do
		if hh_enum(choice2-2) = 0 then
			a_aux1 = "  ";
			{ENG+} 
		    choice3 = accept(concat("Cluster ",cluster_c,", Household ",edit("999",hh_hh(choice2-2))),
				"Choose interviewer",
				"Return");  
			 {+ENG}	
		else
			a_aux1 = edit("999",hh_enum(choice2-2));
			{ENG+} 
		    choice3 = accept(concat("Cluster ",cluster_c,", Household ",edit("999",hh_hh(choice2-2))),
				concat("Change interviewer - currently ",a_aux1),
				"Return");  
			 {+ENG}
		endif;
				
		if choice3 		= 1 then		{enumerator code}
			op_enumlist();
			break;
		elseif choice3  = 2 then		{ return}
			break;
		endif;

	enddo;
end;

{ ------------------------------------------------------------------ }
// HH Enumerator assignment 
function op_assign_2();
  always2 = 1;
  while always2 = 1 do
	do varying i = 1 until i > max_array_elements + 2
	  hh_list(i) = "";
	enddo;
	{ENG+} hh_list(1) = "HH number - Interviewer A - Resp HH Member"; {+ENG}     
	{ENG+} hh_list(2) = "Return to main menu";  {+ENG}    	     
	do varying i = 3 until i > hh_count+2
	  if hh_enum(i-2) = 0 then
	    a_aux1="      ";
	  else
		a_aux1=edit("ZZZ9",hh_enum(i-2));
	  endif;		
	  hh_list(i) = concat(edit("999",hh_hh(i-2)),"   -   ",hh_assign(i-2)[1:13],a_aux1,"   -   ",hh_head(i-2));
	enddo;
	{ENG+} choice2 = accept("Select household to assign",hh_list); {+ENG}
	if choice2 = 2 then 
	  break; 		
	elseif choice2 > 2 then 
	  op_assign_3();
	endif;
  enddo;
	
// write the record of ctrl_cluster, verify if changed, if empty and before was empty, remain equal	
  ctrl_cluster.SHTOTAL = XTOTAL;
  do varying j = 1 until j > hh_count
    ctrl_cluster.hh(j)			= hh_hh(j);
	ctrl_cluster.enum_name(j)	= hh_assign(j);
	ctrl_cluster.enum(j)		= hh_enum(j);
	ctrl_cluster.head_hh_name(j)= hh_head(j);
	ctrl_cluster.hh_address(j)	= hh_addr(j);
  enddo;	
	
  lrc = writecase(ctrl_cluster);
  if lrc = 0 then
	{ENG+} errmsg("Error writing ctrl_cluster"); {+ENG}
  endif;	
end;	


{ ------------------------------------------------------------------ }
// Interviewer assignment to HH 
function op_assignment()
	c_i = edit("999",ser.c_cluster);
	loadcase(clusters,c_i);
	lrc = loadcase(sampsel,c_i);		
	if lrc = 0 then
		errmsg(10012,ser.c_cluster);
		stop(1);
	endif;		
    max_array_elements = XTOTAL;
    		
	cluster_ok = 2;
	if ser.c_cluster = notappl then
		errmsg(10009);
		cluster_ok = 0;
	else
		cluster_c = edit("999",ser.c_cluster);
		lrc = loadcase(ctrl_cluster,cluster_c);
		if lrc = 0 then
			errmsg(10009);
			cluster_ok = 0;
		elseif ctrl_cluster.cl_status <> 1 then
			errmsg(10010);
			cluster_ok = 0;	
		endif;
	endif;
	if cluster_ok = 2 then 
		cluster_ok = 0;
		op_init_array();
		i = count(ctrl_cluster.hh_assignment);
		if i = 0 then
		  hh_count = XTOTAL;
		  do varying j = 1 until j > hh_count	
		    hh_hh(j)	= sampsel.xnumber(j);
			{ENG+} hh_assign(j)= 'Not assigned'; {+ENG}
			hh_enum(j)  = 0;
			hh_head(j)	= sampsel.xname(j);
			hh_addr(j)	= sampsel.xaddress(j);
		  enddo;	
		  op_assign_2();
		else
			hh_count = i;							{records exist }
			do varying j = 1 until j > i
				hh_hh(j)	= ctrl_cluster.hh(j);
				hh_assign(j)= ctrl_cluster.enum_name(j);
				hh_enum(j)  = ctrl_cluster.enum(j);
				hh_head(j)	= ctrl_cluster.head_hh_name(j);
				hh_addr(j)	= ctrl_cluster.hh_address(j);
			enddo;
			hh_count = i;
			op_assign_2();
		endif;	

	endif;
	op_assignment = 1;
end;



{ ------------------------------------------------------------------ }
//   Funtion to copy the selected data to the transmission folders )
function op_prepare()
// interviewer data files
	fileconcat(concat(".\DATA\TRANSMISSION\A",edit("999",c_cluster),".dat"),
				concat("Data\RECEIVED\A",edit("999",c_cluster),"*.dat"));
	fileconcat(concat(".\DATA\TRANSMISSION\O",edit("999",c_cluster),".dat"),
				concat("Data\RECEIVED\O",edit("999",c_cluster),"*.dat"));
// interviewer GPS files
	fileconcat(concat(".\DATA\TRANSMISSION\G",edit("999",c_cluster),".dat"),
				concat("Data\RECEIVED\G",edit("999",c_cluster),"*.dat"));
// interviewer note files
	fileconcat(concat(".\DATA\TRANSMISSION\A",edit("999",c_cluster),".dat.not"),
				concat("Data\RECEIVED\A",edit("999",c_cluster),"*.dat.not"));
end;

function collapse()
// interviewer data files
	fileconcat(concat(".\TEMP\A",edit("999",c_cluster),".dat"),
				concat("Data\RECEIVED\A",edit("999",c_cluster),"*.dat"));
	fileconcat(concat(".\TEMP\O",edit("999",c_cluster),".dat"),
				concat("Data\RECEIVED\O",edit("999",c_cluster),"*.dat"));
// interviewer GPS files
	fileconcat(concat(".\TEMP\G",edit("999",c_cluster),".dat"),
				concat("Data\RECEIVED\G",edit("999",c_cluster),"*.dat"));
// interviewer note files
	fileconcat(concat(".\TEMP\A",edit("999",c_cluster),".dat.not"),
				concat("Data\RECEIVED\A",edit("999",c_cluster),"*.dat.not"));
end;

{ ------------------------------------------------------------------ }
//   Funtion to copy the selected data to the transmission folders )
function op_concat()
// interviewer data files
	fileconcat(concat(".\DATA\CONCAT\A",edit("999",c_cluster),".dat"),
				concat("Data\RECEIVED\A",edit("999",c_cluster),"*.dat"));
	fileconcat(concat(".\DATA\CONCAT\O",edit("999",c_cluster),".dat"),
				concat("Data\RECEIVED\O",edit("999",c_cluster),"*.dat"));
// interviewer GPS files
	fileconcat(concat(".\DATA\CONCAT\G",edit("999",c_cluster),".dat"),
				concat("Data\RECEIVED\G",edit("999",c_cluster),"*.dat"));
// interviewer note files
	fileconcat(concat(".\DATA\CONCAT\A",edit("999",c_cluster),".dat.not"),
				concat("Data\RECEIVED\A",edit("999",c_cluster),"*.dat.not"));
end;




{ ------------------------------------------------------------------ }
// PFF generation for data entry process 
// en_genpff(c_cluster,$,0,i);
function en_genpff(apptype,CL_NO,HH_NO,partial)
	if apptype = 1 then
		prefix = "A";
		app = "CFTF";
		app_folder = "ENTRY";
	elseif apptype = 2 then
		app = "SECONDASSIGN";
		app_folder = "ENTRY";
	elseif apptype = 3 then
		app = "SECONDMODULE";
		app_folder = "ENTRY";
		prefix = "A";
	elseif apptype = 4 then
		app = "INTEGRATION";
		app_folder = "ENTRY";
	endif;
		

	eq_id_c = edit("999",ser.eq_id);
	cluster_c = edit("999",CL_NO);
	hh_c = edit("999",hh_no);

// Verify if the file exist, in case yes, delete this old file
	if fileexist(concat(".\",strip(f_name))) = 1 then
		filedelete(concat(".\",strip(f_name)));
	endif;


// generation of the new file
	file_status = setfile(working_file,concat(".\",strip(f_name)));

// lines generation 
	filewrite(working_file," ");
	filewrite(working_file,"[Run Information]");
	filewrite(working_file, "Version=CSPro 6.3");
	filewrite(working_file, "AppType=Entry");
	filewrite(working_file, "[DataEntryInit]");
	filewrite(working_file, concat("OperatorID=", edit("999",ser.eq_id)));

	{ no StartMode for modify }
	if cl_no = 0 then
		filewrite(working_file, "StartMode=ADD");
	else
		filewrite(working_file, "StartMode=ADD;%s",concat(cluster_c,hh_c));
	endif;
	filewrite(working_file, "Lock=Verify");
//endif;
	filewrite(working_file, "NoFileOpen=Yes");
	filewrite(working_file, "[Files]");

// aplication name
	filewrite(working_file, concat("Application=.\", strip(app_folder), "\", strip(app), ".ent"));
		
// data file
	if apptype = 1 then
		filewrite(working_file, concat("InputData=", ".\DATA\CONCAT\A", cluster_c,".dat"));
	elseif apptype in 2:4 then
		filewrite(working_file, concat("InputData=", ".\ENTRY\NULL.dat"));
	endif;

// External lookup files
	if apptype = 1 then
		filewrite(working_file, "[ExternalFiles]");
		filewrite(working_file, concat("INTERV=", ".\LOOKUP\", "interv.dat")); 	{Enumerator and supervisor information data}
		filewrite(working_file, concat("SER=",".\LOOKUP\", "serial.dat")); 		{Enumerator and supervisor information data}
		filewrite(working_file, concat("CLUSTERS=",".\LOOKUP\", "clusters.dat")); 	{Sample file}
		filewrite(working_file, concat("CTRL_HH=",".\DATA\CONTROL\", "CT",cluster_c,hh_c,".dat")); 	{Control modules file}
		filewrite(working_file, concat("OTHERS=",".\DATA\RAWD\", "O",cluster_c,".dat")); 	{OTHERS file}
	elseif apptype in 2,4 then
		filewrite(working_file, "[ExternalFiles]");
		filewrite(working_file, concat("INTERV=", ".\LOOKUP\", "interv.dat")); 	{Enumerator and supervisor information data}
		filewrite(working_file, concat("CTRL_HH=", ".\DATA\CONTROL\CT", cluster_c,hh_c,".dat")); 	{HH control file }
	elseif apptype = 3 then			{ Assign modules to 2nd interviewer }
		filewrite(working_file, "[ExternalFiles]");
		filewrite(working_file, concat("INTERV=", ".\LOOKUP\", "interv.dat")); 	{Enumerator and supervisor information data}
		filewrite(working_file, concat("CTRL_HH=", ".\DATA\CONTROL\CT", cluster_c,hh_c,".dat")); 	{HH control file }
		filewrite(working_file, concat("CFTF=", ".\DATA\RAWD\", prefix,cluster_c,hh_c,eq_id_c,".dat")); 	{HH control file }
	endif;

// parameters sent to the application
	filewrite(working_file, "[Parameters]");
	if apptype = 1 then
//Parameter=ccchhhiiipsss0	ccc=cluster,hhh=hh,iii=interviewer code,p=partial,sss=supervisor,0=from enumerator program
		filewrite(working_file, concat("Parameter=",cluster_c,hh_c,eq_id_c,edit("9",partial),edit("99",ser.team_id),"0","1")); 
	elseif apptype in 2:4 then
		filewrite(working_file, concat("Parameter=",cluster_c,hh_c,eq_id_c)); 
	endif;

// close the file
	close(working_file);

end;



{ ------------------------------------------------------------------------- }
{ Backup process to external flash memory }
function op_backup()

// 1. Verify if the flash memory is available
	c_i = pathname(CSEntryExternal);
	if c_i[1:1] = "<" then
		{ENG+} errmsg("Flash memory is not available for backup, process aborted"); {+ENG}
	else
			
// 2. Verify if the data folder for this teamviewer exist in the flash, in case NO, create all the folders
		i = 0;
		c_j = concat(c_i,"data",edit("999",ser.eq_id));
		if !direxist(c_j) then 
			if !dircreate(c_j) then
				{ENG+} errmsg("Folder %s, could no be created, process aborted",c_j); {+ENG}
				inc(i);
			endif;
			if !dircreate(concat(c_j,"/RAWD")) then
				{ENG+} errmsg("Folder %s, could no be created, process aborted",concat(c_j,"/RAWD")); {+ENG}
				inc(i);
			endif;
			if !dircreate(concat(c_j,"/CONCAT")) then
				{ENG+} errmsg("Folder %s, could no be created, process aborted",concat(c_j,"/CONCAT")); {+ENG}
				inc(i);
			endif;
			if !dircreate(concat(c_j,"/RECEIVED")) then
				{ENG+} errmsg("Folder %s, could no be created, process aborted",concat(c_j,"/RECEIVED")); {+ENG}
				inc(i);
			endif;
			if !dircreate(concat(c_j,"/CONTROL")) then
				{ENG+} errmsg("Folder %s, could no be created, process aborted",concat(c_j,"/CONTROL")); {+ENG}
				inc(i);
			endif;
			if !dircreate(concat(c_j,"/LOOKUP")) then
				{ENG+} errmsg("Folder %s, could no be created, process aborted",concat(c_j,"/LOOKUP")); {+ENG}
				inc(i);
			endif;
		endif;

// 3. copy the files to the flash memory
// 3.1 copy RAWD data
		if i = 0 then
			if !filecopy("./DATA/RAWD/*.*",concat(c_j,"/RAWD")) then
				{ENG+} errmsg("Error writing %s data to flash memory","RAWD"); {+ENG}
				inc(i);
			endif;
		
// 3.2 copy CONCAT data
			if !filecopy("./DATA/CONCAT/*.*",concat(c_j,"/CONCAT")) then
				{ENG+} errmsg("Error writing %s data to flash memory","CONCAT"); {+ENG}
				inc(i);
			endif;
		
// 3.3 copy RECEIVED data
			if !filecopy("./DATA/RECEIVED/*.*",concat(c_j,"/RECEIVED")) then
				{ENG+} errmsg("Error writing %s data to flash memory","RECEIVED"); {+ENG}
				inc(i);
			endif;
		
// 3.4 copy RECEIVED data
			if !filecopy("./DATA/CONTROL/*.*",concat(c_j,"/CONTROL")) then
				{ENG+} errmsg("Error writing %s data to flash memory","CONTROL"); {+ENG}
				inc(i);
			endif;
		
// 3.5 copy LOOKUP data
			if !filecopy("./LOOKUP/*.*",concat(c_j,"/LOOKUP")) then
				{ENG+} errmsg("Error writing %s data to flash memory","LOOKUP"); {+ENG}
				inc(i);
			endif;
		endif;
// 4. End of the process, send msg
		if i = 0 then
			{ENG+} errmsg("Backup done successfully, take out the cable and flash memory"); {+ENG}
		else
			{ENG+} errmsg("Backup with errors, check the previous messages!!!"); {+ENG}
		endif;
	endif;
end;




{ ------------------------------------------------------------------ }

PROC SUPERVISOR_FF
preproc

{checking for Serialization}
Checkserial();

if !fileexist("..\Lookup\interv.dat") | !fileexist("..\Lookup\clusters.dat") | !fileexist("..\Lookup\sampsel.dat") then
	errmsg(10003);
	lrc = op_first_transmission();
	if lrc = 0 then
		errmsg(10004);
		stop(1);
	endif;
endif;
cluster_ok = 0;



f_received 		= ".\Data\RECEIVED\";
f_concat		= ".\Data\CONCAT\";
f_transmission	= ".\Data\TRANSMISSION\";
superv   =  ".\SUPERVISOR";   { supervisor programs }
temp = ".\TEMP";



PROC SUPERVISOR_ID
onfocus
scode = "1";			{ key for unique record master tables }

always = 1;
lrc = loadcase(ser,scode);
if lrc <> 0 then
	i = int(ser.eq_id/10)*10;
	if (ser.eq_id-i) <>  0 then
		errmsg(10000);
		lrc = 0;
	endif;
endif;

cod_oper = edit("999",ser.eq_id);

if c_cluster = notappl then
	c_cluster = 0;
	writecase(SER);
endif;


x = edit("999",ser.eq_id);

loadcase(INTERV,x);


while always = 1 do
	cluster_c = edit("999",c_cluster);
	lrc = loadcase(ctrl_cluster,cluster_c);
	if lrc = 0 | ctrl_cluster.cl_status = notappl then
		{ENG+} a_aux1 = "Not assigned for data entry"; {+ENG}
	elseif ctrl_cluster.cl_status = 1 then
		if soccurs(ctrl_cluster.hh_assignment) = 0 then
			{ENG+} a_aux1 = "Open, no HH assigned to interviewers"; {+ENG}
		else
			{ENG+} a_aux1 = "Open"; {+ENG}
		endif;
	else
		{ENG+} a_aux1 = "Closed"; {+ENG}
	endif;
	{ENG+} 
	choice = accept(concat("Supervisor main menu, Supervisor: ",edit("999",eq_id){," ",strip(iname)}),
				concat("Cluster: ",edit("999",ser.c_cluster)," ",a_aux1),{1}
				" 1. Open/close cluster",									{2}
				" 2. Assign households to interviewers",					{3}
				"====== Communication with Interviewers =======",			{4}
				" 3. Receive questionnaires from interviewers",				{5} 
				" 4. Review questionnaires",								{6} 
				" 5. Send updates to interviewers",							{7}
				"=== Communications w/Central Office options ===",			{8}
				" 6. Transmit data to Central Office",						{9}
				" 7. Receive program updates from Central Office",			{10}
				"================ Other options ===============",			{11}
				" 8. Hidden households",									{12}
			    " 9. Backup to external flash memory",						{13} 
			    "10. Close/list cluster",									{14} 
				concat("11. Exit application             ",p_version));		{15} 
     {+ENG}		

	if choice =  2 then 		{ Cluster Open-close-selection }
		op_cluster_selection();
		if cluster_ok = 1 then
			$ = "X";       
			advance CLUSTER_ID;
		endif;
	
	elseif choice = 3 then		{ assign HH to enumerator }
		op_assignment();


	elseif choice = 4 then		{ hidden HH }
		$ = "X";
		cluster_ok = 5;
		advance cluster_id;
	
	elseif choice = 5 then		{ receive HHs from interviewers }
		op_transmission_BT();
	    op_concat();			{ Concatenate files from different interviewers for the same cluster }
	
	elseif choice = 6 then		{ review questionnaires }
	    op_concat();			{ Concatenate files from different interviewers for the same cluster }
	    $ = "X";
		cluster_ok = 4;
		advance cluster_id;

	elseif choice = 7 then 	{ send updates to enumerators }
		op_transmission_BT();	

	elseif choice = 9 then 	{ Prepare data for transmission }
		  op_prepare();
 		  if op_transmission_CO() = 1 then
			op_delete_transmission();
		  endif;

	elseif choice = 10 then 	{ Receive program updates }
		op_transmission_Programs();


	elseif choice = 12 then		{ hidden HH }
		$ = "X";
		cluster_ok = 5;
		advance cluster_id;


	elseif choice = 13 then 	{ backup to flash }
	{ENG+} 
		choice2 = accept("Backup to external flash drive",
					"Do you have the flash drive connected to the tablet?",
					"Yes",
					"No");
	 {+ENG}
		if choice2 = 2 then
			op_backup();
		endif;
    
    elseif choice = 14 then { CheckID - preface to closing the cluster }
        collapse();
		f_name = "application.pff";
        app = "CHECKID";
        makeckid( 2 );
        close( fromckid );
	
		// call the data entry program
		execPFF(strip(f_name),stop);
	elseif choice = 15 then 	{ exit }
		stop(1);
	endif;
enddo;



postproc
if choice in 2,6,12  then
	skip to CLUSTER_ID;
endif;


close(ctrl_cluster);
filedelete("LOOKUP\ctrl_cluster.dat");
filedelete("LOOKUP\ctrl_cluster.dat.idx");
errmsg(10017);
stop(1);


PROC CLUSTER_ID
//-------------
onfocus
if cluster_ok = 0 then
	$ = 0;
	reenter supervisor_id;
endif;

if cluster_ok = 4 then
	skip hh_number;
endif;

if cluster_ok = 5 then
	skip hh_hidden;
endif;

cluster_ok = 0;

if ser.c_cluster = notappl then
	$ = 0;
endif;

postproc
  if $ = 0 then
	errmsg(10005);
	reenter;
  endif;
  cluster_c = edit("999",$);
  lrc = loadcase(clusters,cluster_c);
  if lrc = 0 then
	errmsg(10006,$);
	reenter;
  endif;

ser.c_cluster = $;
lrc = writecase(ser);
if lrc = 0 then
	errmsg(10001);
	stop(1);
endif;

lrc = loadcase(ctrl_cluster,cluster_c);
if lrc = 0 | ctrl_cluster.cl_status = notappl then
	always2 = 1;
	while always2 = 1 do
	{ENG+} 
		choice2 = accept("Cluster not open for data collection",
					concat("Do you want to open cluster ",cluster_c, "?"),
					"Yes",
					"No"); 
	 {+ENG}
		if choice2 = 3 then
			cluster_ok = 1;
			reenter;
		elseif choice2 = 2 then
			if lrc = 0 then	
				clear(ctrl_cluster);
			endif;
			ctrl_cluster.cluster = $;
			ctrl_cluster.cl_status  = 1;
			lrc = writecase(ctrl_cluster);
			if lrc = 0 then
				errmsg(10008);
				stop(1);
			endif;
			always2 = 0;
			break;
		endif;
	enddo;
elseif ctrl_cluster.cl_status = 2 then
	always2 = 1;
	while always2 = 1 do
	{ENG+} 
		choice2 = accept("Cluster previously closed for data collection",
					concat("Do you want to open cluster ",cluster_c, " again?"),
					"Yes",
					"No"); 
	 {+ENG}
		if choice2 = 3 then
			reenter;
		elseif choice2 = 2 then
			ctrl_cluster.cl_status  = 1;
			lrc = writecase(ctrl_cluster);
			if lrc = 0 then
				errmsg(10008);
				stop(1);
			endif;
			always2 = 0;
			break;
		endif;
	enddo;
elseif ctrl_cluster.cl_status = 1 then
	if count(ctrl_cluster.hh_assignment) = 0 then 
		always3 = 1;
		while always3 = 1 do
		{ENG+} 
			choice2 = accept("Cluster was opened previously, but no households were assigned",
						concat("Do you want to close cluster ",cluster_c, "?"),
						"Yes",
						"No");
		 {+ENG}
			if choice2 = 2 then
				ctrl_cluster.cl_status = notappl;
				lrc = writecase(ctrl_cluster);
				if lrc = 0 then
					errmsg(10008);
					stop(1);
				endif;
				always3 = 0;
				break;
			elseif choice2 = 3 then
				always3 = 0;
				break;
			endif;
		enddo;
	else
		always3 = 1;
		while always3 = 1 do
		{ENG+} 
			choice2 = accept("Cluster open for data collection and households were assigned",
						concat("Do you want to close cluster ",cluster_c, "?"),
						"Yes",
						"No");
		 {+ENG}
			if choice2 = 2 then
			  FileCopy( concat( strip(temp), "\ERRORS.TXT" ), concat( strip(superv), "\ERRORS.TXT" ) );
			  setfile( fromckid, concat( strip(superv), "\ERRORS.TXT" ) );  { file coming from CHECKID }

			  FileRead( fromckid, chkfile );
			  if pos( "WITH", chkfile ) then
			    {ENG+} errmsg( "Cluster can't be closed as there are still pending errors" ); {+ENG}
				always3 = 0;
				break;
			  else
			    {ENG+} errmsg( "Cluster successfully closed" ); {+ENG}
			      //    alldata();
			      //    backupf();
			    op_prepare();
	 		    if op_transmission_CO() = 1 then
				  op_delete_transmission();
  			    endif;
			    ctrl_cluster.cl_status = 2;
				lrc = writecase(ctrl_cluster);
				if lrc = 0 then
				  errmsg(10008);
				  stop(1);
				endif;
				always3 = 0;
				break;
			  endif;  

			elseif choice2 = 3 then
				always3 = 0;
				break;
			endif;
		enddo;
	endif;
endif;
reenter supervisor_id;



PROC HH_NUMBER


preproc
  cluster_c = edit("999",ser.c_cluster);
  lrc = loadcase(clusters,cluster_c);
  if lrc = 0 then
	errmsg(11024);
	stop(1);
  endif;
  lrc = loadcase(sampsel,cluster_c);
  if lrc = 0 then
	errmsg(11024);
	stop(1);
  endif;

  hh_count = XTOTAL;

  lrc = loadcase(ctrl_cluster,cluster_c);
  if lrc = 0 then
	errmsg(11023);
	stop(1);
  endif;

  c_i = edit("999",ser.c_cluster);
  if !fileexist(concat(".\DATA\CONCAT\A",c_i,".dat")) then
	errmsg(11029);
	move supervisor_id;
  endif;

  {ENG+} j = show(ctrl_cluster.hh_assignment, hh, enum, Head_hh_name, title("Household","Interviewer A","Resp HH Mem"));  {+ENG}	
  $ = hh(j); 
    
 // noinput; { !! TO DO GD - this noinput statement is removing the input WHYYYYYY }

postproc
 
    
if ctrl_cluster.enum(j) = 0  then
	errmsg(11026);
	reenter;
endif;
{ENG+} 
i = accept(concat("Do you want to review household ",edit("999",$),"?"), 
		"Yes",
		"Return to main menu");
 {+ENG}
if i in 0,2 then
	move supervisor_id;
endif;

// generate pff file for dataentry
f_name = "application.pff";
en_genpff(1,c_cluster,$,1);

// call the data entry program
execPFF(strip(f_name),stop);
stop(1);	
	
	
PROC HH_HIDDEN

onfocus
c_i = edit("999",ser.c_cluster);
loadcase(clusters,c_i);
lrc = loadcase(sampsel,c_i);
if lrc = 0 then
	errmsg(10012,ser.c_cluster);
	stop(1);
endif;		
max_array_elements = XTOTAL;
    		
if ser.c_cluster = notappl then
	errmsg(10009);
	reenter supervisor_id;
else
	cluster_c = edit("999",ser.c_cluster);
	lrc = loadcase(ctrl_cluster,cluster_c);
	if lrc = 0 then
		errmsg(10009);
		reenter supervisor_id;
	elseif ctrl_cluster.cl_status <> 1 then
		errmsg(10010);
		reenter supervisor_id;	
	endif;
endif;

while always = 1 do
	{ENG+} 
	choice4 = accept(concat("Selection menu, Supervisor: (",edit("999",eq_id),") ",strip(iname)),
				"1. Add hidden household",					{1}
				"2. Delete hidden household",				{2}
				"3. Return to main menu");					{3} 
   {+ENG}
	if choice4 = 3 then
		reenter supervisor_id;
	
	elseif choice4 = 1 then
		if XTOTAL >= 35 then
			errmsg(10070);
			reenter supervisor_id;
		endif;
	
	elseif choice4 = 2 then
		if XTOTAL = 30 then
			errmsg(10071);
			reenter supervisor_id;
		endif;
	endif;
	if choice4 in 1,2 then
		break;
	endif;
enddo;
		
if choice4 = 1 then				{ new hidden HH }
	j = 0;
	hidden_list(1) = "";
	hidden_list(2) = "";
	hidden_list(3) = "";
	hidden_list(4) = "";
	hidden_list(5) = "";
	
// find HH 901
	k = 0;
	do varying i = 31 until i > XTOTAL
		if XNUMBER(i) <> notappl then
			if XNUMBER(i) = 901 then
				k = 1;
			endif;
		endif;
	enddo;			
	if k = 0 then
		inc(j);
		hidden_list(j) = "901";
	endif;

// find 902	
	k = 0;
	do varying i = 31 until i > XTOTAL
		if XNUMBER(i) <> notappl then
			if XNUMBER(i) = 902 then
				k = 1;
			endif;
		endif;
	enddo;			
	if k = 0 then
		inc(j);
		hidden_list(j) = "902";
	endif;

// find 903	
	k = 0;
	do varying i = 31 until i > XTOTAL
		if XNUMBER(i) <> notappl then
			if XNUMBER(i) = 903 then
				k = 1;
			endif;
		endif;
	enddo;			
	if k = 0 then
		inc(j);
		hidden_list(j) = "903";
	endif;

// find 904	
	k = 0;
	do varying i = 31 until i > XTOTAL
		if XNUMBER(i) <> notappl then
			if XNUMBER(i) = 904 then
				k = 1;
			endif;
		endif;
	enddo;			
	if k = 0 then
		inc(j);
		hidden_list(j) = "904";
	endif;

// find 905	
	k = 0;
	do varying i = 31 until i > XTOTAL
		if XNUMBER(i) <> notappl then
			if XNUMBER(i) = 905 then
				k = 1;
			endif;
		endif;
	enddo;			
	if k = 0 then
		inc(j);
		hidden_list(j) = "905";
	endif;

	{ENG+} i = accept("Enter Hidden Household code",hidden_list);  {+ENG}
	if i > 0 then
// generate pff for new HH household
		f_name = "application.pff";
		eq_id_c = edit("999",ser.eq_id);
		cluster_c = edit("999",ser.c_cluster);
		hh_c = hidden_list(i);

// Verify if the file exist, in case yes, delete this old file
		if fileexist(concat(".\",strip(f_name))) = 1 then
			filedelete(concat(".\",strip(f_name)));
		endif;


// generation of the new file
		file_status = setfile(working_file,concat(".\",strip(f_name)));

// lines generation 
		filewrite(working_file," ");
		filewrite(working_file,"[Run Information]");
		filewrite(working_file, "Version=CSPro 6.3");
		filewrite(working_file, "AppType=Entry");
		filewrite(working_file, "[DataEntryInit]");
		filewrite(working_file, concat("OperatorID=", edit("999",ser.eq_id)));

		filewrite(working_file, "StartMode=ADD");
		filewrite(working_file, "Lock=Verify");
		filewrite(working_file, "NoFileOpen=Yes");
		filewrite(working_file, "[Files]");

// aplication name
		filewrite(working_file,"Application=.\Supervisor\AddHidden.ent");
		filewrite(working_file, concat("InputData=", ".\ENTRY\HiddenNULL.dat"));

// External lookup files
		filewrite(working_file, "[ExternalFiles]");
		filewrite(working_file, concat("CLUSTERS=",".\LOOKUP\", "clusters.dat")); 			{Sample file}
		filewrite(working_file, concat("SAMPSEL=",".\Lookup\", "sampsel.dat"));				{sampsel file }
		filewrite(working_file, concat("CTRL_CLUSTER=",".\Lookup\", "ctrl_cluster.dat"));	{sampsel file }

// parameters sent to the application
		filewrite(working_file, "[Parameters]");
		filewrite(working_file, concat("Parameter=",cluster_c,hh_c)); 

// close the file
		close(working_file);
// call the data entry program
		execPFF(strip(f_name),stop);
		stop(1);	
	else
		reenter supervisor_id;
	endif;

elseif choice4 = 2 then		{ delete hidden HH }
	if hh_status(XTOTAL) <> notappl then
		{ENG+} errmsg("Hidden Household %d, with data collected, can not be deleted",XNUMBER(XTOTAL));  {+ENG} { GD - was yhhsel(ytothh) }
		reenter supervisor_id;
	endif;

	{ENG+} i = accept(concat("Confirm delete Household ",edit("999",XNUMBER(XTOTAL))),"Yes","No"); {+ENG}
	if i = 1 then
	
		delete(samrec2(XTOTAL));
		XTOTAL = XTOTAL - 1;
		writecase(sampsel);
		
		if hh(1) <> notappl then
			delete(hh_assignment(XTOTAL+1));
			writecase(ctrl_cluster);
		endif;
		{ENG+} errmsg("Hidden household deleted"); {+ENG}
	endif;
	reenter supervisor_id;
endif;
